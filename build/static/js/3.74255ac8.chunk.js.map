{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","Fragment","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,kGCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,wBCgE/BC,EA7DG,SAACL,GACjB,MAAoCM,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAiBC,mBACjBC,EAAeD,mBAoBrB,OACE,eAAC,IAAME,SAAP,WACE,cAAC,IAAD,CACEC,KAAMN,EACNO,QAAS,SAACC,GAAD,MACP,yEAGJ,cAAC,EAAD,UACE,uBACEC,QAdmB,WACzBR,GAAc,IAcRP,UAAWC,IAAQe,KACnBC,SA9BR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBZ,EAAea,QAAQC,MACvCC,EAAcb,EAAaW,QAAQC,MAIzCvB,EAAMyB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAmB5C,UAKGxB,EAAM4B,WACL,qBAAK3B,UAAWC,IAAQ2B,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK7B,UAAWC,IAAQ6B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK1B,OAEtC,sBAAKR,UAAWC,IAAQ6B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKxB,OAEpC,qBAAKV,UAAWC,IAAQmC,QAAxB,SACE,wBAAQC,QArCY,WAC5B9B,GAAc,IAoCkCP,UAAU,MAAlD,kC,gBCpCGsC,UAjBE,WACb,MAA6BC,YAAQC,KAA9BC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OAEdC,EAAUC,cAEhBC,qBAAU,WACQ,cAAXH,GACCC,EAAQG,KAAK,aAElB,CAACJ,EAAOC,IAKX,OAAO,cAAC,EAAD,CAAWhB,UAAsB,YAAXe,EAAsBlB,WAH3B,SAACuB,GACrBN,EAAYM","file":"static/js/3.74255ac8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__9qLOI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__1lE9P\",\"loading\":\"QuoteForm_loading__27R0O\",\"control\":\"QuoteForm_control__1KRqE\",\"actions\":\"QuoteForm_actions__35FFW\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import React, { useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\"; //prompt watches if user navigate away so helps us to warn user\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n  const finishEnteringHandler = () => {\n    setIsEntering(false);\n  }//this will not be triggered untill user doesnt nativate away\n\n  const formFocusedHandler = () => {\n    setIsEntering(true); //to store information here we need state\n  };\n\n  return (\n    <React.Fragment>\n      <Prompt\n        when={isEntering}\n        message={(location) =>\n          \"Are you aure you wanna leave ! All your entered data will be lost !\"\n        }\n      />\n      <Card>\n        <form\n          onFocus={formFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishEnteringHandler} className=\"btn\">Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default QuoteForm;\n//location holds the information about the page we are trying to go into\n","import { useEffect } from 'react';\r\nimport QuoteForm from '../components/quotes/QuoteForm'\r\nimport { useHistory } from 'react-router-dom';\r\nimport useHttp from '../hooks/use-http'\r\nimport { addQuote } from '../lib/api';\r\n\r\nconst NewQuote = () => {\r\n    const {sendRequest, status} =useHttp(addQuote);\r\n    //we could extract more data by object destructing but sendRequest, status.. all we need for now\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if(status === 'completed'){\r\n            history.push('/quotes');\r\n        }\r\n    }, [status,history])\r\n\r\n    const addQuoteHandler = (quoteData) => {\r\n        sendRequest(quoteData)\r\n    }\r\n    return <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler}/>\r\n}\r\n\r\nexport default NewQuote\r\n//onAddQuote is defined in QuoteForm\r\n\r\n//push() allows user to go back to page but replace dont allow user to go back\r\n"],"sourceRoot":""}